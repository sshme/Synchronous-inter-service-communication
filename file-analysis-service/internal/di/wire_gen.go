// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"fileanalysisservice/internal/application/service"
	"fileanalysisservice/internal/infrastructure/config"
	"fileanalysisservice/internal/infrastructure/filestoringservice"
	"fileanalysisservice/internal/infrastructure/persistence/postgres"
	"fileanalysisservice/internal/infrastructure/quickchart"
	"fileanalysisservice/internal/infrastructure/storage/s3"
	"fileanalysisservice/internal/interfaces/api/handler"
	"fileanalysisservice/internal/interfaces/api/router"
	"fileanalysisservice/internal/interfaces/repository"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitializeApplication wires up all the dependencies
func InitializeApplication() (*Application, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	db, err := postgres.NewDB(configConfig)
	if err != nil {
		return nil, err
	}
	analysisRepository := postgres.NewAnalysisRepository(db)
	shingleRepository := postgres.NewShingleRepository(db)
	fileStoringService := filestoringservice.NewFileStoringService(configConfig)
	quickChart := quickchart.NewQuickChart(configConfig)
	fileStorage, err := s3.NewFileStorage(configConfig)
	if err != nil {
		return nil, err
	}
	contentAnalyserService := service.NewContentAnalyserService(analysisRepository, shingleRepository, fileStoringService, quickChart, fileStorage)
	analyseHandler := handler.NewAnalysisHandler(contentAnalyserService)
	infoHandler := handler.NewInfoHandler()
	docsHandler := handler.NewDocsHandler()
	routerRouter := router.NewRouter(analyseHandler, infoHandler, docsHandler)
	application := NewApplication(routerRouter, configConfig)
	return application, nil
}

// wire.go:

// RepositorySet provides repository implementations
var RepositorySet = wire.NewSet(postgres.NewAnalysisRepository, wire.Bind(new(repository.AnalysisRepository), new(*postgres.AnalysisRepository)), postgres.NewShingleRepository, wire.Bind(new(repository.ShingleRepository), new(*postgres.ShingleRepository)))

// Application is the main application container
type Application struct {
	Router *router.Router
	Config *config.Config
}

// NewApplication creates a new application
func NewApplication(router2 *router.Router, config2 *config.Config) *Application {
	return &Application{
		Router: router2,
		Config: config2,
	}
}
